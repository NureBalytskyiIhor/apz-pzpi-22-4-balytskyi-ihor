МІНІСТЕРСТВО ОСВІТИ ТА НАУКИ УКРАЇНИ
ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ
 
 
ЗВІТ
з практичної роботи №1
з дисципліни “Архітектура програмного забезпечення” 
на тему “Патерни проєктування”


 
 
Виконав:                                                                       Прийняв:                                                                                
Балицький І.О.                                  ст. викладач кафедри ПІ  Сокорчук Ігор
                                                                                                            Петрович


 


















 
 
Харків 2025
1 ІСТОРІЯ ЗМІН
№
	Дата
	Версія звіту
	Опис змін
	1
	14.05.2025
	1
	Створено звіт
	Таблиця 1 – Історія змін
________________
2 ЗАВДАННЯ
1. Підготувати доповідь на тему: «Шаблон (патерн) проєктування ПЗ» (із книг: Ґамма, “ООП. Патерни проєктування”, GoF, крім патерна Singletone)
2. Створити та оформити слайди презентації доповіді
3. Створити та опублікувати на YouTube відеозапис доповіді
4. Оформити та завантажити на dl.nure.ua звіт до виконаної роботи
5. При потребі створити та налаштувати у GitHub обліковий запис для облікового запису студента в домені @nure.ua
6. Створити GitHub репозиторій з вказаним далі іменем для виконання завдань з дисципліни
7. Створити у корені створеного репозиторію файл README.md з вказаним далі змістом та вказані далі директорії для окремих завдань
8. Експортувати звіт у файл у простому текстововому форматі та завантажити цей файл у директорію Pract1 у репозиторії GitHub
9. Завантажити у вказану далі піддиректорію увесь програмний код, який розглядається у доповіді ПЗ1


3 ОПИС ВИКОНАНОЇ РОБОТИ
Було досліджено шаблон проєктування State (Стан). На слайдах презентації зрозуміло описаний шаблон, описано проблеми, які він вирішує. Наведені приклади, як у вигляді коду так і з повсякденного життя для кращого розуміння.
________________


    


4 ВИСНОВКИ
             В ході практичної роботи досліджено шаблон проєктування «Стан»
________________


ДОДАТОК А
    
Відеозапис доповіді: https://youtu.be/IOpq5grlIYA
Хронологічний опис:
00:00 - Початок
00:12 – Вступ: що таке шаблони проектування?
00:47 – Що таке шаблон State?
01:18 – Проблема, яку вирішує State
01:40 – Коли варто використовувати State
02:00 – UML-структура
02:54 – Приклад: Банкомат
03:14 – Інший приклад: Текстовий редактор
03:26 – Приклад коду без використання State
03:51 – Реалізація з використанням State
04:22 – Переваги використання шаблону State
04:38 – Недоліки
04:52 – Коли НЕ варто використовувати State
05:05 – Висновки
________________


ДОДАТОК Б
Слайди презентації на тему «Шаблон проєктування «Стан»».
  

Рисунок Б.1 – Титульний слайд презентації
  



Рисунок Б.2 – Вступ: що таке шаблони проектування?




  

Рисунок Б.3 – Що таке шаблон State?




  

Рисунок Б.4 – Проблема, яку вирішує State
  

Рисунок Б.5 – Коли варто використовувати State
  

Рисунок Б.6 – UML-структура
  

Рисунок Б.7 – Приклад: Банкомат
  

Рисунок Б.8 – Інший приклад: Текстовий редактор
  

Рисунок Б.9 – Приклад коду без використання State
  

Рисунок Б.10 – Реалізація з використанням State
  

Рисунок Б.11 – Реалізація з використанням State(продовження)
  

Рисунок Б.12 – Переваги використання шаблону State
  

Рисунок Б.13 – Недоліки
  

Рисунок Б.14 – Коли НЕ варто використовувати State
  

Рисунок Б.15 – Висновки
  

Рисунок Б.16 – Джерела
________________
ДОДАТОК В
Фрагменти програмного коду, використані у презентації:
1        // Приклад коду без використання State
2        //java
3        class Player {
4            String state = "idle";
5        
6            void handleInput(String input) {
7                if (state.equals("idle") && input.equals("run")) {
8                    state = "running";
9                    System.out.println("Start running");
10        } else if (state.equals("running") && input.equals("stop")) {
11                    state = "idle";
12                    System.out.println("Stop running");
13                }
14                // ...
15            }
16        }
17        
18        // Реалізація з використанням State
29        interface State {
20            void handle(Player context, String input);
21        }
22        
23        class IdleState implements State {
24            public void handle(Player context, String input) {
25                if (input.equals("run")) {
26                    context.setState(new RunningState());
27                    System.out.println("Start running");
28                }
39            }
30        }
31        
32        class RunningState implements State {
33            public void handle(Player context, String input) {
34                if (input.equals("stop")) {
35                    context.setState(new IdleState());
36                    System.out.println("Stop running");
37                }
38            }
49        }
40        
41        class Player {
42            private State state = new IdleState();
43        
44            public void setState(State state) {
45                this.state = state;
46            }
47        
48            public void handleInput(String input) {
59                state.handle(this, input);
50            }
51        }